{"version":3,"sources":["components/Input.jsx","components/Checkbox.jsx","components/PasswordInput.jsx","components/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","name","type","label","reference","errors","className","id","ref","map","e","key","Checkbox","checkCondition","indexOf","PasswordInput","onChange","useState","show","setShow","Fragment","onClick","preventDefault","toggleShow","Form","props","useForm","register","handleSubmit","userData","setUserData","password","setPassword","confirmPassword","setConfirmPassword","formSubmitted","setFormSubmitted","onSubmit","data","console","log","required","firstName","lastName","validate","value","atpos","dotpos","lastIndexOf","length","emailAddress","filter","minLength","pattern","input","currentTarget","termsConditions","message","style","fontWeight","fontSize","textDecoration","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.9bbbc02f.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Input({ name, type, label, reference, errors }) {\n  return (\n    <div className=\"form-group\">\n      <label className=\"input-label\">{label}</label>\n      <div className=\"input-wrapper\">\n        <input\n          name={name}\n          type={type}\n          className=\"form-control\"\n          id={name}\n          ref={reference}\n        />\n        {errors.map((e) => (\n          <p key={e} className=\"errorMessage\">\n            {e}\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Input;\n","import React, { Fragment } from \"react\";\n\nfunction Checkbox({ name, label, checkCondition, reference, errors }) {\n  return (\n    <Fragment>\n      <div className=\"input-label\">{label}</div>\n      <div className=\"form-check\">\n        <div className=\"form-check-label\">\n          <label>\n            <input\n              name={name}\n              type=\"checkbox\"\n              className=\"form-check-input\"\n              id={name}\n              ref={reference}\n            />\n            {checkCondition}\n          </label>\n        </div>\n      </div>\n      {errors.map((e) => (\n        <p key={errors.indexOf(e)} className=\"errorMessage\">\n          {e}\n        </p>\n      ))}\n    </Fragment>\n  );\n}\n\nexport default Checkbox;\n","import React, { useState } from \"react\";\n\nconst PasswordInput = ({ name, label, reference, errors, onChange }) => {\n  const [show, setShow] = useState(false);\n\n  const inputType = () => {\n    return show === false ? \"password\" : \"text\";\n  };\n\n  const toggleShow = (e) => {\n    e.preventDefault();\n\n    setShow(!show);\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"form-group passwordSection\">\n        <label className=\"input-label\">{label}</label>\n        <div className=\"input-group mb-3 input-wrapper\">\n          <input\n            name={name}\n            type={inputType()}\n            className=\"form-control\"\n            id={name}\n            ref={reference}\n            onChange={onChange}\n          />\n          <div className=\"input-group-append\">\n            <button\n              className=\"btn btn-outline-secondary\"\n              onClick={(e) => toggleShow(e)}\n            >\n              {!show ? \"Show\" : \"Hide\"}\n            </button>\n          </div>\n          {errors.map((e) => (\n            <p key={e} className=\"errorMessage\">\n              {e}\n            </p>\n          ))}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default PasswordInput;\n","import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport Input from \"./Input\";\nimport Checkbox from \"./Checkbox\";\nimport PasswordInput from \"./PasswordInput\";\n\nfunction Form(props) {\n  const { register, handleSubmit, errors } = useForm();\n  const [userData, setUserData] = useState({});\n\n  const onSubmit = (data) => {\n    console.log(\"submitted\", data);\n    setUserData(data);\n    setFormSubmitted(true);\n  };\n\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [formSubmitted, setFormSubmitted] = useState(false);\n\n  const validateEmail = (value) => {\n    const atpos = value.indexOf(\"@\");\n    const dotpos = value.lastIndexOf(\".\");\n    if (atpos < 1 || dotpos < atpos + 2 || dotpos + 2 >= value.length) {\n      return false;\n    }\n    return true;\n  };\n\n  const handleSetPassword = ({ currentTarget: input }) => {\n    setPassword(input.value);\n  };\n\n  const handleSetConfirmPassword = ({ currentTarget: input }) => {\n    setConfirmPassword(input.value);\n  };\n\n  const checkPasswords = () => {\n    return password === confirmPassword;\n  };\n\n  return (\n    <div className=\"form-wrapper\">\n      {!formSubmitted && (\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <h2>Signup Form</h2>\n          <p className=\"fieldsInfo\">All fields are required</p>\n          <Input\n            name=\"firstName\"\n            label=\"First Name\"\n            type=\"text\"\n            reference={register({ required: true })}\n            errors={errors.firstName ? [\"Please enter first name\"] : []}\n          />\n          <Input\n            name=\"lastName\"\n            label=\"Last Name\"\n            type=\"text\"\n            reference={register({ required: true })}\n            errors={errors.lastName ? [\"Please enter last name\"] : []}\n          />\n          <Input\n            name=\"emailAddress\"\n            label=\"Email Address\"\n            type=\"email\"\n            reference={register({\n              required: true,\n              validate: validateEmail,\n            })}\n            errors={[\n              errors.emailAddress?.type === \"required\"\n                ? \"Please enter an email address\"\n                : null,\n              errors.emailAddress?.type === \"validate\"\n                ? \"Please enter valid email address\"\n                : null,\n            ].filter((e) => e)}\n          />\n          <PasswordInput\n            label=\"Password\"\n            name=\"password\"\n            reference={register({\n              required: true,\n              minLength: 12,\n              pattern: /^(?=.*\\d{2,})(?=.*[A-Z]{2,})(?=.*[-!@$#\\\\%^&*()_+|~=`{}[\\]:\";'<>?,./]{2,}).{12,}$/,\n            })}\n            onChange={handleSetPassword}\n            errors={[\n              errors.password?.type === \"required\"\n                ? \"Please enter a password\"\n                : null,\n              errors.password?.type === \"minLength\"\n                ? \"Password must be at least 12 characters long\"\n                : null,\n              errors.password?.type === \"pattern\"\n                ? \"Password must contain at least 2 upper case letters, 2 numbers, and 2 symbols\"\n                : null,\n            ].filter((e) => e)}\n          />\n          <div className=\"passwordAdvice\">\n            <p>- Minimum 12 characters</p>\n            <p>\n              - Must contain at least 2 upper case letters, 2 numbers, and 2\n              symbols\"\n            </p>\n          </div>\n          <PasswordInput\n            label=\"Confirm Password\"\n            name=\"confirmPassword\"\n            reference={register({ required: true, validate: checkPasswords })}\n            onChange={handleSetConfirmPassword}\n            errors={[\n              errors.confirmPassword?.type === \"required\"\n                ? \"Please enter a password\"\n                : null,\n              errors.confirmPassword?.type === \"validate\"\n                ? \"Confirm password does not match password\"\n                : null,\n            ].filter((e) => e)}\n          />\n          <Checkbox\n            name=\"termsConditions\"\n            label=\"Terms and conditions\"\n            checkCondition=\"I agree to the terms and conditions\"\n            reference={register({ required: true })}\n            errors={[\n              errors.termsConditions?.type === \"required\"\n                ? \"Please check terms and conditions\"\n                : null,\n            ].filter((e) => e)}\n            message=\"I agree to the terms and conditions\"\n          />\n          <div className=\"button-wrapper\">\n            <button type=\"submit\" className=\"btn btn-primary\">\n              SIGN UP\n            </button>\n          </div>\n        </form>\n      )}\n      {formSubmitted && (\n        <div className=\"thank-you\">\n          <p style={{ fontWeight: \"bold\", fontSize: 24 }}>\n            Thank you for signing up!\n          </p>\n          <p>\n            We will send a confirmation email to{\" \"}\n            <span style={{ textDecoration: \"underline\", fontWeight: \"bold\" }}>\n              {userData.emailAddress}{\" \"}\n            </span>\n            shortly.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Form;\n","import React from \"react\";\nimport Form from \"./components/Form\";\nimport \"./custom.scss\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <main>\n        <div className=\"top-header\">\n          <h1>\n            Fake Science <span>Digest</span>\n          </h1>\n        </div>\n        <div className=\"container\">\n          <Form />\n        </div>\n      </main>\n      <footer>\n        <p>© 2020 FAKE SCIENCE DIGEST</p>\n      </footer>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}